{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "eb0ad7a8-9348-4368-b6d8-aaf311315e3f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Multiplication table of 1:\n",
      "1* 0 = 0\n",
      "1* 1 = 1\n",
      "1* 2 = 2\n",
      "1* 3 = 3\n",
      "1* 4 = 4\n",
      "1* 5 = 5\n",
      "1* 6 = 6\n",
      "1* 7 = 7\n",
      "1* 8 = 8\n",
      "1* 9 = 9\n",
      "1* 10 = 10\n",
      "1* 11 = 11\n",
      "1* 12 = 12\n",
      "Multiplication table of 2:\n",
      "2* 0 = 0\n",
      "2* 1 = 2\n",
      "2* 2 = 4\n",
      "2* 3 = 6\n",
      "2* 4 = 8\n",
      "2* 5 = 10\n",
      "2* 6 = 12\n",
      "2* 7 = 14\n",
      "2* 8 = 16\n",
      "2* 9 = 18\n",
      "2* 10 = 20\n",
      "2* 11 = 22\n",
      "2* 12 = 24\n",
      "Multiplication table of 3:\n",
      "3* 0 = 0\n",
      "3* 1 = 3\n",
      "3* 2 = 6\n",
      "3* 3 = 9\n",
      "3* 4 = 12\n",
      "3* 5 = 15\n",
      "3* 6 = 18\n",
      "3* 7 = 21\n",
      "3* 8 = 24\n",
      "3* 9 = 27\n",
      "3* 10 = 30\n",
      "3* 11 = 33\n",
      "3* 12 = 36\n",
      "Multiplication table of 4:\n",
      "4* 0 = 0\n",
      "4* 1 = 4\n",
      "4* 2 = 8\n",
      "4* 3 = 12\n",
      "4* 4 = 16\n",
      "4* 5 = 20\n",
      "4* 6 = 24\n",
      "4* 7 = 28\n",
      "4* 8 = 32\n",
      "4* 9 = 36\n",
      "4* 10 = 40\n",
      "4* 11 = 44\n",
      "4* 12 = 48\n",
      "Multiplication table of 5:\n",
      "5* 0 = 0\n",
      "5* 1 = 5\n",
      "5* 2 = 10\n",
      "5* 3 = 15\n",
      "5* 4 = 20\n",
      "5* 5 = 25\n",
      "5* 6 = 30\n",
      "5* 7 = 35\n",
      "5* 8 = 40\n",
      "5* 9 = 45\n",
      "5* 10 = 50\n",
      "5* 11 = 55\n",
      "5* 12 = 60\n",
      "Multiplication table of 6:\n",
      "6* 0 = 0\n",
      "6* 1 = 6\n",
      "6* 2 = 12\n",
      "6* 3 = 18\n",
      "6* 4 = 24\n",
      "6* 5 = 30\n",
      "6* 6 = 36\n",
      "6* 7 = 42\n",
      "6* 8 = 48\n",
      "6* 9 = 54\n",
      "6* 10 = 60\n",
      "6* 11 = 66\n",
      "6* 12 = 72\n",
      "Multiplication table of 7:\n",
      "7* 0 = 0\n",
      "7* 1 = 7\n",
      "7* 2 = 14\n",
      "7* 3 = 21\n",
      "7* 4 = 28\n",
      "7* 5 = 35\n",
      "7* 6 = 42\n",
      "7* 7 = 49\n",
      "7* 8 = 56\n",
      "7* 9 = 63\n",
      "7* 10 = 70\n",
      "7* 11 = 77\n",
      "7* 12 = 84\n",
      "Multiplication table of 8:\n",
      "8* 0 = 0\n",
      "8* 1 = 8\n",
      "8* 2 = 16\n",
      "8* 3 = 24\n",
      "8* 4 = 32\n",
      "8* 5 = 40\n",
      "8* 6 = 48\n",
      "8* 7 = 56\n",
      "8* 8 = 64\n",
      "8* 9 = 72\n",
      "8* 10 = 80\n",
      "8* 11 = 88\n",
      "8* 12 = 96\n",
      "Multiplication table of 9:\n",
      "9* 0 = 0\n",
      "9* 1 = 9\n",
      "9* 2 = 18\n",
      "9* 3 = 27\n",
      "9* 4 = 36\n",
      "9* 5 = 45\n",
      "9* 6 = 54\n",
      "9* 7 = 63\n",
      "9* 8 = 72\n",
      "9* 9 = 81\n",
      "9* 10 = 90\n",
      "9* 11 = 99\n",
      "9* 12 = 108\n",
      "Multiplication table of 10:\n",
      "10* 0 = 0\n",
      "10* 1 = 10\n",
      "10* 2 = 20\n",
      "10* 3 = 30\n",
      "10* 4 = 40\n",
      "10* 5 = 50\n",
      "10* 6 = 60\n",
      "10* 7 = 70\n",
      "10* 8 = 80\n",
      "10* 9 = 90\n",
      "10* 10 = 100\n",
      "10* 11 = 110\n",
      "10* 12 = 120\n",
      "Multiplication table of 11:\n",
      "11* 0 = 0\n",
      "11* 1 = 11\n",
      "11* 2 = 22\n",
      "11* 3 = 33\n",
      "11* 4 = 44\n",
      "11* 5 = 55\n",
      "11* 6 = 66\n",
      "11* 7 = 77\n",
      "11* 8 = 88\n",
      "11* 9 = 99\n",
      "11* 10 = 110\n",
      "11* 11 = 121\n",
      "11* 12 = 132\n",
      "Multiplication table of 12:\n",
      "12* 0 = 0\n",
      "12* 1 = 12\n",
      "12* 2 = 24\n",
      "12* 3 = 36\n",
      "12* 4 = 48\n",
      "12* 5 = 60\n",
      "12* 6 = 72\n",
      "12* 7 = 84\n",
      "12* 8 = 96\n",
      "12* 9 = 108\n",
      "12* 10 = 120\n",
      "12* 11 = 132\n",
      "12* 12 = 144\n"
     ]
    }
   ],
   "source": [
    "table[]\n",
    "print (\"Multiplication table of 1:\")\n",
    "for i in range(13):\n",
    "    print(\"1*\",i,\"=\",1*i)\n",
    "print (\"Multiplication table of 2:\")\n",
    "for i in range(13):\n",
    "    print(\"2*\",i,\"=\",2*i)\n",
    "print (\"Multiplication table of 3:\")\n",
    "for i in range(13):\n",
    "    print(\"3*\",i,\"=\",3*i)\n",
    "print (\"Multiplication table of 4:\")\n",
    "for i in range(13):\n",
    "    print(\"4*\",i,\"=\",4*i)\n",
    "print (\"Multiplication table of 5:\")\n",
    "for i in range(13):\n",
    "    print(\"5*\",i,\"=\",5*i)\n",
    "print (\"Multiplication table of 6:\")\n",
    "for i in range(13):\n",
    "    print(\"6*\",i,\"=\",6*i)\n",
    "print (\"Multiplication table of 7:\")\n",
    "for i in range(13):\n",
    "    print(\"7*\",i,\"=\",7*i)\n",
    "print (\"Multiplication table of 8:\")\n",
    "for i in range(13):\n",
    "    print(\"8*\",i,\"=\",8*i)\n",
    "print (\"Multiplication table of 9:\")\n",
    "for i in range(13):\n",
    "    print(\"9*\",i,\"=\",9*i)\n",
    "print (\"Multiplication table of 10:\")\n",
    "for i in range(13):\n",
    "    print(\"10*\",i,\"=\",10*i)\n",
    "print (\"Multiplication table of 11:\")\n",
    "for i in range(13):\n",
    "    print(\"11*\",i,\"=\",11*i)\n",
    "print (\"Multiplication table of 12:\")\n",
    "for i in range(13):\n",
    "    print(\"12*\",i,\"=\",12*i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "18a45bc4-fa0e-454b-a1a5-3ce7dc3287cf",
   "metadata": {},
   "outputs": [],
   "source": [
    "from tabulate import tabulate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "714661fa-65a7-4a37-825d-27039585f463",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "| Multiplication table 1   | Multiplication table 2   | Multiplication table 3   |\n",
      "|:-------------------------|:-------------------------|:-------------------------|\n",
      "| 1 * 1 = 1                | 2 * 1 = 2                | 3 * 1 = 3                |\n",
      "| 1 * 2 = 2                | 2 * 2 = 4                | 3 * 2 = 6                |\n",
      "| 1 * 3 = 3                | 2 * 3 = 6                | 3 * 3 = 9                |\n",
      "| 1 * 4 = 4                | 2 * 4 = 8                | 3 * 4 = 12               |\n",
      "| 1 * 5 = 5                | 2 * 5 = 10               | 3 * 5 = 15               |\n",
      "| 1 * 6 = 6                | 2 * 6 = 12               | 3 * 6 = 18               |\n",
      "| 1 * 7 = 7                | 2 * 7 = 14               | 3 * 7 = 21               |\n",
      "| 1 * 8 = 8                | 2 * 8 = 16               | 3 * 8 = 24               |\n",
      "| 1 * 9 = 9                | 2 * 9 = 18               | 3 * 9 = 27               |\n",
      "| 1 * 10 = 10              | 2 * 10 = 20              | 3 * 10 = 30              |\n",
      "| 1 * 11 = 11              | 2 * 11 = 22              | 3 * 11 = 33              |\n",
      "| 1 * 12 = 12              | 2 * 12 = 24              | 3 * 12 = 36              |\n"
     ]
    }
   ],
   "source": [
    "from tabulate import tabulate\n",
    "\n",
    "data = []\n",
    "for i in range(1, 13):\n",
    "    row = []\n",
    "    for j in range(1, 4):\n",
    "        row.append(f\"{j} * {i} = {j * i}\")\n",
    "    data.append(row)\n",
    "\n",
    "table = tabulate(data, headers=[\"Multiplication table 1\", \"Multiplication table 2\", \"Multiplication table 3\"], tablefmt=\"pipe\")\n",
    "\n",
    "print(table)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "9c2e6412-0240-463e-88a8-f4b5edea4cc6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "data = [\n",
    "    ['Multiplication table 1', 'Multiplication table 2', 'Multiplication table 3'],\n",
    "    ['1 * 1 = 1', '2 * 1 = 2', '3 * 1 = 3'],\n",
    "    ['1 * 2 = 2', '2 * 2 = 4', '3 * 2 = 6'],\n",
    "    ['1 * 3 = 3', '2 * 3 = 6', '3 * 3 = 9'],\n",
    "    # Add the remaining rows\n",
    "]\n",
    "\n",
    "headers = data[0]\n",
    "numeric_data = data[1:]\n",
    "transposed_data = list(map(list, zip(*numeric_data)))\n",
    "\n",
    "# Adjust the number of headers to match the number of columns in the transposed data\n",
    "headers = headers[:len(transposed_data)]\n",
    "\n",
    "# Create an array of column indices for positioning the bars\n",
    "x = np.arange(len(headers))\n",
    "\n",
    "# Adjust the width of the bars\n",
    "width = 0.2\n",
    "\n",
    "# Create the bar chart\n",
    "fig, ax = plt.subplots()\n",
    "for i, column_data in enumerate(transposed_data):\n",
    "    ax.bar(x + i * width, column_data, width, label=headers[i])\n",
    "\n",
    "# Add chart title and labels\n",
    "ax.set_title(\"Multiplication Tables\")\n",
    "ax.set_xlabel(\"Multiplication Expression\")\n",
    "ax.set_ylabel(\"Result\")\n",
    "\n",
    "# Set the x-axis tick positions and labels\n",
    "ax.set_xticks(x)\n",
    "ax.set_xticklabels(headers)\n",
    "\n",
    "# Add a legend\n",
    "ax.legend()\n",
    "\n",
    "# Show the chart\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3279c81f-e397-495c-8163-c30e77ec552a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
